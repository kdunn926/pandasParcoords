<html><head><script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js'></script>
<script type='text/javascript' src='http://d3js.org/d3.v3.min.js'></script>
<script type='text/javascript' src='http://rawgit.com/jashkenas/underscore/master/underscore-min.js'></script>
<script type='text/javascript' src='http://rawgit.com/syntagmatic/underscore.math/master/underscore.math.js'></script>
<script type='text/javascript' src='http://rawgit.com/jcoglan/sylvester/master/src/sylvester.js'></script>
<script type='text/javascript' src='http://threedubmedia.googlecode.com/files/jquery.event.drag-1.5.min.js'></script>
<script type='text/javascript' src='http://rawgit.com/mleibman/SlickGrid/master/slick.core.js'></script>
<script type='text/javascript' src='http://rawgit.com/mleibman/SlickGrid/master/slick.grid.js'></script>
<script type='text/javascript' src='http://rawgit.com/mleibman/SlickGrid/master/controls/slick.pager.js'></script>
<script type='text/javascript' src='http://rawgit.com/mleibman/SlickGrid/master/slick.dataview.js'></script>
<script type='text/javascript' src='http://rawgit.com/jcoglan/sylvester/master/src/vector.js'></script>
<script type='text/javascript' src='http://syntagmatic.github.io/parallel-coordinates/d3.parcoords.js'></script>
<link rel='stylesheet' href='http://syntagmatic.github.io/parallel-coordinates/examples/lib/slickgrid/slick.grid.css' type='text/css'>
<link rel='stylesheet' href='http://syntagmatic.github.io/parallel-coordinates/examples/lib/slickgrid/jquery-ui-1.8.16.custom.css' type='text/css'>
<link rel='stylesheet' href='http://syntagmatic.github.io/parallel-coordinates/examples/lib/slickgrid/slick.pager.css' type='text/css'>
<link rel='stylesheet' href='http://syntagmatic.github.io/parallel-coordinates/d3.parcoords.css' type='text/css'>
<link rel='stylesheet' href='http://syntagmatic.github.io/parallel-coordinates/examples/style.css' type='text/css'>
</head><body>
<style>
body, html {
  margin: 0;
  height: 100%;
  width: 100%;
  overflow: hidden;
  font-size: 12px;
}
#grid, #pager {
  position: relative;
  width: 100%;
}
#grid {
  bottom: 0;
  height: 300px;
}
#pager {
  position: fixed;
  top: 720px; /*heightPlusLabelPad + #grid height + height*/
  height: 20px;
}
.slick-row:hover {
  font-weight: bold;
  color: #069;
}
</style>
<script type='text/javascript'>var element = $('body'); 
element.append($('<tbody><tr>'));
element.append($('<td><input type="range" min="0" max="0.25" value="0.0" step="0.01" id="smoothness"/>&nbsp;Curve Smoothness&nbsp;&nbsp;<strong id="smooth">0.0</strong></td>'));
element.append($('<td style="padding-left:10px;"><input type="range" min="0" max="1" value="0" step="0.05" id="bundling"/>&nbsp;Bundling Strength&nbsp;&nbsp;<strong id="strength">0</strong></td>'));
element.append($('<td id="bundleDimension" style="padding-left:10px;">Bundling dimension&nbsp;&nbsp;</td>'))
element.append($('</tr></tbody>'));

var d3div = $('<div id="myParCoordDiv" class="parcoords" style="width:100%; height:300px"></div>');
d3div.css('background-color','#fff');
d3div.css('position', 'absolute');
d3div.css('left', -100);
d3div.css('margin', 'auto');
element.append(d3div);

var padddiv = $('<div style="width:1750px;height:400px"></div>');
element.append(padddiv);

// For slickgrid
var slickGrid = $('<div id="grid"></div>')

var slickPager = $('<div id="pager"></div>')

element.append(slickGrid);
element.append(slickPager);

var blue_to_brown = d3.scale.linear()
  .domain([0, 10])
  .range(["steelblue", "brown"])
  .interpolate(d3.interpolateLab);

var color = function(d) { return blue_to_brown(d['total_outliers']); };

var brushListener = function(event) { 
//    console.log(event.length); 
    kernel.execute("brushed_selection=" + JSON.stringify(event))
};

var color_scale = d3.scale.linear()
                  .domain([-2,-0.5,0.5,2])
                  .range(["#DE5E60", "steelblue", "steelblue", "#98df8a"])
                  .interpolate(d3.interpolateLab);

function zscore(col) {
    var n = col.length,
        mean = _(col).mean(),
        sigma = _(col).stdDeviation();

    return function(d) {
        return (d-mean)/sigma;
    };
};

function zcolor(col, dimension) {
    var z = zscore(_(col).pluck(dimension).map(parseFloat));
    return function(d) {
        return color_scale(z(d[dimension]))
    }
};

var myTypes = {"School": "string", "FARM": "string", "Ethnicity": "string", "Gender": "string"};

function changeColor(dimension) {
    if (myTypes[dimension] != "string") {
        graph.svg.selectAll(".dimension")
            .style("font-weight", "normal")
            .filter(function(d) {
                return d == dimension;
            })
            .style("font-weight", "bold");

        graph.color(zcolor(graph.data(),dimension)).render();
    }
};


function callUpdate(data) {
    graph.data(data).brush().render().updateAxes();
    
    d3.selectAll("text.label")
        .attr("transform", "rotate(-90)")
        .attr('text-anchor', 'begin');
    //graph.data(data).render().updateAxes();
};

var graph = d3.parcoords()("#myParCoordDiv")
    .alpha(0.4)
    .types( myTypes )
    .margin( { top: 24, right: 0, bottom: 12, left: 25 } )
    .mode("queue");
    

// load csv file and create the chart
d3.csv('tmpn06kFd', function(dataset) {

  // slickgrid needs each data element to have an id
  dataset.forEach(function(d,i) { d.id = d.id || i; });

  graph
    .data(dataset)
    .render()
    .interactive()
    .shadows()
    .reorderable()
    .detectDimensions()
    .bundleDimension('Cohort')
    .types( myTypes )
    .hideAxis(["School"])
    .brushMode('1D-axes') // enable brushing

    
    .on("brush", function(d) {
        //brushListener(d); // This only works if the cell is executed inline with the notebook
        gridUpdate(d);
    });
    
    // setting up grid
    var column_keys = d3.keys(dataset[0]);
    var columns = column_keys.map(function(key,i) {
        return {
          id: key,
          name: key,
          field: key,
          sortable: true
        }
    });
    
    var options = {
        enableCellNavigation: true,
        enableColumnReorder: false,
        multiColumnSort: false
    };
    
    var dataView = new Slick.Data.DataView();
    var grid = new Slick.Grid("#grid", dataView, columns, options);
    var pager = new Slick.Controls.Pager(dataView, grid, $("#pager"));
    
    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
        grid.updateRowCount();
        grid.render();
    });
    
    dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
    });
    
    // column sorting
    var sortcol = column_keys[0];
    var sortdir = 1;
    
    function comparer(a, b) {
        var x = a[sortcol], y = b[sortcol];
        return (x == y ? 0 : (x > y ? 1 : -1));
    };

    // click header to sort grid column
    grid.onSort.subscribe(function (e, args) {
        sortdir = args.sortAsc ? 1 : -1;
        sortcol = args.sortCol.field;
        //if ($.browser.mse && $.browser.version <= 8) {
        //  dataView.fastSort(sortcol, args.sortAsc);
        //} 
        //else {
        dataView.sort(comparer, args.sortAsc);
        //}
    });
    
    // highlight row in chart
    grid.onMouseEnter.subscribe(function(e,args) {
        var i = grid.getCellFromEvent(e).row;
        var d = graph.brushed() || dataset;
        graph.highlight([d[i]]);
    });
    
    grid.onMouseLeave.subscribe(function(e,args) {
        graph.unhighlight();
    });
    
    // fill grid with data
    gridUpdate(dataset);
    
    function gridUpdate(data) {
        dataView.beginUpdate();
        dataView.setItems(data);
        dataView.endUpdate();
    };
    
    // smoothness
    d3.select("#smoothness").on("change", function() {
        d3.select("#smooth").text(this.value);
        graph.smoothness(this.value).render();
    });

    // bundling strength slider
    d3.select("#bundling").on("change", function() {
        d3.select("#strength").text(this.value);
        graph.bundlingStrength(this.value).render();
    });

    var select = d3.select("#bundleDimension").append("select").on("change", changeBundle);

    var options = select.selectAll('option')
                  .data(graph.dimensions().concat(graph.hideAxis()));

    options
        .enter()
        .append("option")
        .attr("value", function(d) {
            return d;
        })
        .text(function(d) {
            return d;
        })

        function changeBundle() {
            graph.dimensions(d3.keys(graph.types()));
            graph.hideAxis(["School"]);
            graph.bundleDimension(this.value);
            graph.hideAxis(this.value);
        }

        graph.svg
            .selectAll(".dimension")
            .on("click", changeColor);

    d3.selectAll("text.label")
        .attr("transform", "rotate(-90)")
        .attr('text-anchor', 'begin');
        
    d3.selectAll("svg")
        .attr('height', '400px')
        .style('padding-top', '100px');
        
    var newHeight = 300 - 33 + 100
    d3.selectAll("canvas")
        .attr('height', newHeight+'px')
        .style('padding-top', '100px');
});


</script></body></html>